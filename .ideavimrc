" .ideavimrc is a configuration file for IdeaVim plugin. It uses
"   the same commands as the original .vimrc configuration.
" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc


"" -- Suggested options --
"  a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
" Do incremental searching.
source ~/.vimrc



set ideamarks=true
set clipboard+=unnamed
" extensions
set surround
set multiple-cursors
set highlightedyank
set NERDTree
set argtextobj
set which-key
set sneak
set easymotion


Plug 'preservim/nerdtree'
" --- Enable IdeaVim plugins https://jb.gg/ideavim-plugins
nnoremap <leader>e :NERDTreeFocus<CR>
let g:WhichKeyDesc_nerdTreeFocus = "<leader>e Nerd Tree Focus"
nnoremap <C-n> :NERDTree<CR>
let g:WhichKeyDesc_nerdTreeFocus = "<leader>e Nerd Tree Focus"
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>

" Highlight copied text


"" -- Map IDE actions to IdeaVim -- https://jb.gg/abva4t
"" Map \r to the Reformat Code action
map <leader>r <Action>(ReformatCode)
nnoremap ]d <Action>(GotoNextError)
nnoremap [d <Action>(GotoPreviousError)

"" Map <leader>d to start debug
let g:WhichKeyDesc_debug = "<leader>d Debug"


:map <leader>dc <Action>(ChooseDebugConfiguration)
let g:WhichKeyDesc_debugContinue = "<leader>dc Debug Choose Config"

map <leader>ds <Action>(Debug)
let g:WhichKeyDesc_debugContinue = "<leader>ds Debug Start"

"" Map \b to toggle the breakpoint on the current line
map <leader>db <Action>(ToggleLineBreakpoint)
let g:WhichKeyDesc_toggleBreakpoint = "<leader>db Toggle Breakpoint"

  :map <leader>dv <Action>(ViewBreakpoints)
let g:WhichKeyDesc_viewBp = "<leader>dv View Breakpoints"

  :map <leader>dR <Action>(Debugger.RemoveAllBreakpoints)
let g:WhichKeyDesc_removeBp = "<leader>dR Remove All Breakpoints"

" code Refactoring
let g:WhichKeyDesc_refactor = "<leader>c Code Refactoring"

:map <leader>cr <Action>(RenameElement)
let g:WhichKeyDesc_rename = "<leader>cr  Rename"

:map <leader>cR <Action>(Refactorings.QuickListPopupAction)
let g:WhichKeyDesc_rename = "<leader>cR  Quick List"

:map <leader>cfc <Action>(ReformatCode)
let g:WhichKeyDesc_reformat = "<leader>cfc  Reformat Code"

:map <leader>sw <Action>(SurroundWith)

:map <leader>ci <Action>(OptimizeImports)
let g:WhichKeyDesc_importsOptimize = "<leader>ci  Optimize Imports"


" stuff
  :map <leader>cjd <Action>(QuickJavaDoc)
  let g:WhichKeyDesc_jd = "<leader>cjd  Quick Javadoc"
  :map <leader>ch <Action>(ShowErrorDescription)
  let g:WhichKeyDesc_errorDesc = "<leader>ch  Show Error Description"
  :map <leader>cqi <Action>(QuickImplementations)

  " breakpoints

  " comment out
  :map <leader>cc <Action>(CommentByLineComment)
  :map <leader>tt <Action>(CommentByBlockComment)

  " ace
  :map ff <Action>(AceAction)
  :map ft <Action>(AceTargetAction)
  :map fl <Action>(AceLineAction)

" reactivate some IDEA shortcuts
:map gf <Action>(GotoFile)
:map gr <Action>(ShowUsages)
:map <c-s> <Action>(SaveAll)
:map gi <Action>(GotoImplementation)

" run stuff
let g:WhichKeyDesc_run = "<leader>r Run"

:map <leader>rc <Action>(ChooseRunConfiguration)
let g:WhichKeyDesc_runConfig = "<leader>rc Choose Config"
:map <leader>dc <Action>(ChooseDebugConfiguration)
:map <leader>rs <Action>(Run)
let g:WhichKeyDesc_runSelected= "<leader>rs Run Currently Selected"
:map <leader>S <Action>(Stop)
let g:WhichKeyDesc_stop= "<leader>S Stop Running"

" other things
:sap <leader>ns <Action>(NewScratchFile)
:map <leader>an <Action>(Annotate)

" git
:map <leader>gq <Action>(Vcs.QuickListPopupAction)
:map <leader>gp <Action>(Vcs.Push)
:map <leader>gl <Action>(Vcs.Log)
:map <leader>gc <Action>(Vcs.Commit)
:map <leader>gt <Action>(Vcs.UpdateProject)
:map <leader>ga <Action>(Vcs.Add)

nnoremap <leader>si :source ~/.ideavimrc<CR>

" buffers
map <leader>bd <Action>(CloseEditor)
map <leader>ba <Action>(CloseAllEditors)
map <leader>bo <Action>(CloseAllEditorsButActive)


" <Leader>f{char} to move to {char}
let g:WhichKeyDesc_find= "<leader>f Find"
map  <leader>fc <Plug>(easymotion-bd-f)
nmap <leader>fc <Plug>(easymotion-overwin-f)
let g:WhichKeyDesc_findChar= "<leader>fc Find char"

" Move to line
map <Leader>fl <Plug>(easymotion-bd-jk)
nmap <Leader>fl <Plug>(easymotion-overwin-line)
let g:WhichKeyDesc_findLine= "<leader>fl Find Line"

" Move to word
map  <Leader>fw <Plug>(easymotion-bd-w)
nmap <Leader>fw <Plug>(easymotion-overwin-w)
let g:WhichKeyDesc_findWord= "<leader>fw Find Word"

